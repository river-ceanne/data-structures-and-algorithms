/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Data.Structures;

import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import static org.junit.Assert.*;

public class AppTest {

    @Test
    public void testLinkedListInstantiation(){
        LinkedList linkedList = new LinkedList();
        assertEquals(null,linkedList.getHead());
    }

    @Test
    public void testLinkedListInsert(){

        LinkedList linkedList = new LinkedList();
        linkedList.insert("one");

        assertEquals("one",linkedList.getHead().getValue());

        linkedList.insert("two");
        Node temp = linkedList.getHead();
        linkedList.insert("three");

        assertEquals(temp,linkedList.getHead().getNextNode());
    }

    @Test
    public void testLinkedListPrint() {

        LinkedList linkedList = new LinkedList();

        linkedList.insert("one");
        linkedList.insert("two");
        linkedList.insert("three");

        ArrayList<String> res = linkedList.print();

        ArrayList<String> expected = new ArrayList<>();
        expected.add("three");
        expected.add("two");
        expected.add("one");

        assertEquals(expected.size(),res.size());
        assertEquals(expected,res);

    }

    @Test
    public void testLinkedListIncludesTrue() {

        LinkedList linkedList = new LinkedList();

        linkedList.insert("one");
        linkedList.insert("two");
        linkedList.insert("three");

        assertTrue("testing linked list is true: ",
                linkedList.includes("two",linkedList.getHead()));

    }

    @Test
    public void testLinkedListIncludesFalse() {

        LinkedList linkedList = new LinkedList();

        linkedList.insert("one");
        linkedList.insert("two");
        linkedList.insert("three");

        assertFalse("testing linked list is true: ",
                linkedList.includes("five",linkedList.getHead()));

    }

    @Test
    public void testLinkedListAppend() {

        LinkedList linkedList = new LinkedList();

        linkedList.insert("firstInsert");
        linkedList.insert("mid");
        linkedList.insert("lastInsert");
        linkedList.append("the append");

        Node scanner = linkedList.getHead();
        String lastVal = "";

        while(scanner != null){

            if(scanner.getNextNode() == null)
                lastVal = scanner.getValue();

            scanner = scanner.getNextNode();
        }

        assertEquals("the append",lastVal);


    }

    @Test
    public void testInsertBefore(){
        LinkedList linkedList = new LinkedList();

        linkedList.insert("one");
        linkedList.insert("two");
        linkedList.insert("three");
        linkedList.insert("four");

        linkedList.insertBefore("three","two and a half");

        Node scanner = linkedList.getHead();

        while(scanner != null){
            System.out.println(scanner.getValue());
            scanner = scanner.getNextNode();

        }

    }

    @Test
    public void testInsertAfter(){
        LinkedList linkedList = new LinkedList();

        linkedList.insert("one");
        linkedList.insert("two");
        linkedList.insert("three");
        linkedList.insert("four");

        linkedList.insertAfter("three","three and a half");

        Node scanner = linkedList.getHead();

        while(scanner != null){
            System.out.println(scanner.getValue());
            scanner = scanner.getNextNode();

        }

    }



}
